# About The Manual {#about}

Let's start by going through the very basics of the basics: how to learn
about LightFrame.

# Not Covered Here {#notcovered}

We're assuming that you have a working environment. Setting up Apache, PHP or any kind of IDE/editor is outside of this manual's scope.

# Previous Knowledge {#previous}

This manual makes some assumptions on your knowledge. If you find your
skills lacking in some of the areas mentioned above, you should do some
reading-up on the topics before continuing.

The manual, however, tends to err on the safe side by explaining things
from the basics, still trying to avoid tedium.

## "Linux" {#linux}

Whenever you see the word "Linux" written somewhere, read it as "Linux,
or possibly other, compatible, UNIX-derivatives".

Many of the things mentioned in the Linux-context should and probably
would work with many UNIX-like operating systems. Other than the fact
that reading and writing "Linux" is so much faster than explaining the
possible interoperability within a class of operating systems over and
over again, the reason this manual talks about Linux only is that these
things are tested mainly on Linux (and [Darwin][wikipedia_darwin], [Mac
OS X][wikipedia_osx]'s core).

[wikipedia_darwin]: http://en.wikipedia.org/wiki/Darwin_(operating_system)
[wikipedia_osx]: http://en.wikipedia.org/wiki/Mac_OS_X

## PHP {#previous_php}

Obviously, you need to know PHP. Not only do you need to know PHP to
write your website, PHP is used to configure your website. LightFrame
uses [PHP5's object oriented][php_oop] features, so you need to know
something about them. But, push come to shove, you probably can figure
stuff out by looking at the examples and copying from there.

If you, however, don't know PHP, you need to be motivated to learn PHP.
Otherwise you are at in the wrong place, should take a look at
[Wikipedia's list of web application frameworks][wikipedia_waf] and try
again.

[php_oop]: http://php.net/manual/en/language.oop5.php
[wikipedia_waf]: http://en.wikipedia.org/wiki/List_of_web_application_frameworks

## Remote Access {#previous_remote}

In case you are using a remote computer as your server, you need to know how to use either remote shell access (e.g. with `ssh` or [PuTTY][putty]) or at least an FTP client.

[putty]: http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html

# Understanding the Manual {#understanding}

There's a few quick things to be mentioned of the manual's features and
conventions.

## Linkable Headers {#reading_linkableheaders}

Each page in the manual has been designed to explain one, and only one,
thing at a time. The URLs should be easy to remember, bookmark and share
with others. Each header can be linked directly to, by placing the
cursor over the header, and clicking on the left-pointing arrow that
appears. Your browser's address bar should now contain a direct link to
whatever you are seeing at that moment.

## Code Snippets {#reading_code}

As [observational learning][wikipedia_observartional] (and subsequent
experimentation) is such a effective method of learning, this manual is
scattered full of things that you could (and should) try out yourself. 

A code box like this:

    Hello Manual!

&hellip;incidates interaction between you and the computer. Because the
context of the text is hard to guess just by looking, this manual
defines a syntax, which should be easier to see what the corresponding
line tries to convey.

[wikipedia_observartional]: http://en.wikipedia.org/wiki/Observational_learning

 - 
   A line beginning with a dollar sign (`$`) indicates a command to be
   run in a command line.
 - 
   A line beginning with a greater-than sign (`>`) indicates the output
   of a previously run command.

For example:

    $ echo 'foo'
    > foo

...means "when you type the command `echo 'foo'`, you should see the
word `foo` as the result."

Many blocks contain PHP code. These blocks are written as

    <?php
    $foo = "bar";
    echo $foo;

or

    <?php
    ...
    if ($condition) {
      do_something();
    }
    ...

The first one displays a PHP scripts in its entirety. The second one
displays a part of a PHP script &ndash; denoted by the three periods at
both sides of the code. You should never write the periods yourself in
your code. So, whenever you see a code box beginning with "`<?php`",
it's PHP source code.

***Note:*** We prefer omitting the closing PHP tag (`?>`), because of
security and performance reasons. So, this is not a bug, but by design.

Unfortunately, the code box is so versatile, there are more usages than
it is rational to figure out conventions for. Therefore, if a code box
doesn't follow any of the previously mentioned formats, the meaning
should be understood by its context.