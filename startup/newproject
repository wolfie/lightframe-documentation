# A New Start {#newproject}

Now, let's set up the basic structure, used by any given LightFrame
project. There are two methods listed: using LightFrame's scripts or
FTP. If you do have shell access to the server, but don't have PHP CLI
at your disposal, you shouldn't have too much trouble understanding what
needs to be done, by reading both methods, and combining them suitably.

*[CLI]: Command Line Interface

## Creating Project Files {#newproject_files}

We'll start by getting the core files up and running for your project.
These files need to be present at each and every project. Once they are
set up, they're set, and hardly ever need further adjustment later on.

### The Script Way {#newproject_files_script}

_The scripts are currently very rough around the edges and some commands
don't even work anymore. Some script commands are planned to be moved
into their own branches, until polished to completion._

Open a console to your server (either via SSH or just a new terminal
window). For this example, let's do a new project under your user's web
directory, so you'll probably want to start with

    $ cd ~/public_html/
    $ mkdir testproject
    $ cd testproject
    
Assuming you have LightFrame's scripts in your `$PATH`, as instructed
previously, you can now write a simple command to get template files for
a new project:

    $ lf_setup.php startproject
    htaccess > /home/henrikpaul/public_html/testproject
    index.php > /home/henrikpaul/public_html/testproject
    settings.php > /home/henrikpaul/public_html/testproject
    urls.php > /home/henrikpaul/public_html/testproject

    new project created!

For now, you need to manually rename the `.htaccess`-file so that Apache
recognizes it.

    $ mv htaccess .htaccess
    
And let's also make two directories, for later use:

    $ mkdir apps templates
    
Now you can continue with [Basic Project
Configuration](#newproject_conf).

### Using FTP {#newproject_files_ftp}

There's no point in transferring files over just yet, because we need to
edit some files first. Instead, create a new directory in your local
computer (on a Windows machine, the "My Documents" folder is good a
place as any &ndash; users of Linux might enjoy using the user's home
directory), and call it e.g. "testproject".

Find out where you have LightFrame (if you have downloaded a compressed
archive, now would be a good time to extract it), and go to the
`scripts/projectfiles/` subdirectory, where you'll find the following
files: `htaccess`, `index.php`, `settings.php` and `urls.php`. 

Copy all four files to the directory you just created and then rename
`htaccess` to `.htaccess`.

## Basic Project Configuration {#newproject_conf}

_This part will be made easier in the future..._ 

Let's configure the project files now. There are three files that need
to be configured for LightFrame to be set up and running, for that
particular project.

For each chapter, open the file and edit them as instructed.

### index.php {#newproject_conf_index}

This is where the magic begins. But it needs a bit of a nudge - you need to
define both where LightFrame is, and where your project is. These are defined
explicitly, so that neither your project nor LightFrame itself needs to be in
your web path, increasing the security of your scripts.

When you open the file, there's two lines of code you need to change:

    <?php
    define('LF_LIGHTFRAME_PATH',''); // The path to where LightFrame is installed
    define('LF_PROJECT_PATH',''); // The path where your project files are
    ...

So, an example of the end result could look like thus:

    <?php
    define('LF_LIGHTFRAME_PATH','/home/wolfie/lightframe');
    define('LF_PROJECT_PATH','/home/wolfie/public_html/testproject');
    ...

Remember to omit the trailing slashes whenever you enter paths to
LightFrame configurations. Also, the user that Apache runs as needs to
have read-access to both directories, and their subdirectories. If
everything else fails, put both your project and LightFrame underneath
your `public_html` directory.

_NB:_ In case you're doing the editing on your local computer for now,
remember to write the paths as they were in the remote server!

### .htaccess {#newproject_conf_htaccess}

Take your favorite text editor and open the newly created `.htaccess`.

Remove the hash-character (`#`) before the lines beginning with
"`Rewrite`". Replace the slash after "RewriteBase" with whatever comes
after the domain name, when you would open the project-to-be in your
browser. So, if the URL would be, for example,
`http://www.example.com/~your_username/testproject/`, your `.htaccess`
should have the following lines:

    RewriteEngine on
    RewriteBase /~your_username/testproject/
    RewriteCond %{REQUEST_URI} !index\.php
    RewriteRule ^(.*)$ index.php?$1 [PT,L]

### settings.php {#newproject_conf_settings}

This is where the _real_ configuration takes place. This isn't a
complete handbook of all settings and their effects. We're just going to
glance over the most crucial ones.

Find the following lines:

    <?php
    ...
    define ('LF_SITE_PATH', ''); // the path (include trailing slash) to your site. 
    ...
    define ('LF_APACHE_MODREWRITE', false); // Whether MOD_REWRITE is supported or not
    ...

Use the same value for `LF_SITE_PATH` as you previously used in
`.htaccess` for `RewriteBase`. You should also change the value of
`LF_APACHE_MODREWRITE` from `false` to `true`.

Hit save, close, and you're done confing for now.

### FTP users {#newproject_conf_ftp}

If you haven't been working on the remote server directly previously,
_now_ is the time to move all the files over to the server. Remember
which paths you have written in `index.php` and upload both LightFrame
and your project stub in their respective places. Remember to check file
permissions before exiting the software - Apache needs to be able to
read the files.

# Testing It {#test}

At this point, it might be good to check that everything's set up
properly &ndash; just to make sure.

Open your browser with URL where the webpage should be deployed at (e.g.
`http://example.com/~your_username/testproject/`). You should be greeted
by a warming welcome message. To be sure, add some random text at the
end of the URL and try to visit that. If you are still greeted by that
same message, everything's dandy. If you get a 404, your Apache's
`mod_rewrite` settings are wonky (i.e. not working) and should be fixed.
