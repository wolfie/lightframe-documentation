# Groking LightFrame {#grok}

To really [grok](http://en.wiktionary.org/wiki/grok) the framework, the
first step is to understand the terminology. This not only helps you to
understand what the documentation is talking about, but this also eases
the communication between users, e.g. when asking for help.

## General {#general}

Project {#general_project}

:  
   Analogous to 'the website' in the general sense. A collection of
   applications and a set of configuration files.

   _see also: [General: Application](#general_application)_

Application {#general_application}

:  
   An application is a single functional part within a project. An
   application consists of at least one `views.php`-file, it containing
   at least one view. It can optionally contain also models and an URL
   dispatcher.

   Each application has its own directory. These may even contain
   sub-applications underneath the application's directory.

   _see also: [General: Project](#general_project), [UMTV:
   View](#umtv_view), [UMTV: URL Dispatcher](#umtv_dispatcher)_

## UMTV {#umtv}

UMTV {#umtv_umtv}

:  
   Stands for "URLs, Models, Templates, Views" or "URL Dispatcher, Model,
   Template, View"

URL Dispatcher {#umtv_dispatcher}

:  
   A file (`urls.php` at the project root and optionally with
   applications) that contains logic to trigger various views, depending
   on which URI is being visited by the browser.

   _see also: [General: Project](#general_project)_, [General: Application](#general_application)

Model {#umtv_model}

:  
   A native PHP object that extends LightFrame's abstract class `Model`.
   It acts as a 'gateway' to the data in one SQL table (or, in some cases,
   several tables). 

   Found normally in an application's folder, in a file named
   `model.php`. 

   _Note:_ Currently, this naming convention isn't enforced, but it
   might be in the future.

   _see also: [Model: Field](#model_field), [General:
   Application](#general_application)_

Template {#umtv_template}

:  
   A file that defines how the resulting document looks like. It
   contains comments, variables and tags, which are used to generate
   dynamic content.

   _see also: [Template: Context](#template_context), [Template:
   Tag](#template_tag)_

View {#umtv_view}

:  
   Any PHP function that accepts an associative array as an argument,
   and returns a `Respose` object. Most often, the `Response` object
   defines a template and a context-array. 

   _Note:_ Do not confuse this with the [MVC][mvc_wikipedia]-model's
   _view_. This view is closer to the MVC's _controller_.

   _see also: [View: Response](#view_response), [Template:
   Context](#template_context)_
   
[mvc_wikipedia]: http://en.wikipedia.org/wiki/Model-view-controller

### Model {#model}

Field {#model_field}

:  
   A class for a member variable of a `Model` object. For example, the
   `IntField` class can represent and store values typed integer.

### Template {#template}

Context {#template_context}

:  
   An (ordinary) associative array that is passed from view to template.
   The template can then use the value within the context by its key.

Tag {#template_tag}

:  
   A short string within a template to evoke display logic. Tags can be
   _simple_ (no end-tag, like `{% extends %}`), _blocks_ (has an end
   tag, like `{% comment %}..{% endcomment %}`), or _complex_ (contains of
   many parts, like `{% if %}..{% else %}..{% endif %}`)

### View {#view}

Response {#view_response}

:  
   An object that must be returned by a View function. It acts not only as a container for template and context information, but also HTTP headers. You could also enter raw HTML into a `Response`, if you really insist.